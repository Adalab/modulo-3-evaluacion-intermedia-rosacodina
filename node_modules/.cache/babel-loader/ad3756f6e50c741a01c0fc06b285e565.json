{"ast":null,"code":"var _jsxFileName = \"/Users/Rosa/Desktop/projects ADALAB/Mo\\u0301dulo-3/EVALUACIONES/modulo-3-evaluacion-intermedia-rosacodina/src/components/App.js\",\n    _s = $RefreshSig$();\n\nimport '../styles/App.scss';\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet phrases = [{}]; // Función principal.\n\nfunction App() {\n  _s();\n\n  useEffect(() => {\n    fetch('https://beta.adalab.es/curso-intensivo-fullstack-recursos/apis/quotes-friends-tv-v1/quotes.json').then(response => response.json()).then(data => {\n      phrases = data.results;\n      console.log(phrases);\n    }); //cuando la API responde, guardamos los datos en el estado para que se vuelva a renderizar poniendo setStarWatsData por ejemplo\n  });\n  return (\n    /*#__PURE__*/\n    // Como solo se puede devolver una etiqueta, se puede usar una etiqueta ficticia vacia, llamada FRAGMENTO, y que se escribe, abriendo y cerrando la etiqueta vacia, así \"<> html </>\".\n    _jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Frases de Friends\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"body\", {\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: /*#__PURE__*/_jsxDEV(\"li\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true)\n  );\n}\n\n_s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/Rosa/Desktop/projects ADALAB/Módulo-3/EVALUACIONES/modulo-3-evaluacion-intermedia-rosacodina/src/components/App.js"],"names":["useEffect","useState","phrases","App","fetch","then","response","json","data","results","console","log"],"mappings":";;;AAAA,OAAO,oBAAP;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;;AAEA,IAAIC,OAAO,GAAG,CAAC,EAAD,CAAd,C,CACA;;AACA,SAASC,GAAT,GAAe;AAAA;;AACbH,EAAAA,SAAS,CAAC,MAAM;AACdI,IAAAA,KAAK,CACH,iGADG,CAAL,CAGGC,IAHH,CAGSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EAHtB,EAIGF,IAJH,CAISG,IAAD,IAAU;AACdN,MAAAA,OAAO,GAAGM,IAAI,CAACC,OAAf;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYT,OAAZ;AACD,KAPH,EADc,CASd;AACD,GAVQ,CAAT;AAYA;AAAA;AACE;AACA;AAAA,8BACE;AAAA,+BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AAAA,+BACE;AAAA,iCACE;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAFF;AAaD;;GA1BQC,G;;KAAAA,G;AA4BT,eAAeA,GAAf","sourcesContent":["import '../styles/App.scss';\nimport { useEffect, useState } from 'react';\n\nlet phrases = [{}];\n// Función principal.\nfunction App() {\n  useEffect(() => {\n    fetch(\n      'https://beta.adalab.es/curso-intensivo-fullstack-recursos/apis/quotes-friends-tv-v1/quotes.json'\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        phrases = data.results;\n        console.log(phrases);\n      });\n    //cuando la API responde, guardamos los datos en el estado para que se vuelva a renderizar poniendo setStarWatsData por ejemplo\n  });\n\n  return (\n    // Como solo se puede devolver una etiqueta, se puede usar una etiqueta ficticia vacia, llamada FRAGMENTO, y que se escribe, abriendo y cerrando la etiqueta vacia, así \"<> html </>\".\n    <>\n      <header>\n        <h1>Frases de Friends</h1>\n      </header>\n      <body>\n        <ul>\n          <li></li>\n        </ul>\n      </body>\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}