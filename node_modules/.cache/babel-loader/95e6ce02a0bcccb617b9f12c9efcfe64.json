{"ast":null,"code":"var _jsxFileName = \"/Users/Rosa/Desktop/projects ADALAB/Mo\\u0301dulo-3/EVALUACIONES/modulo-3-evaluacion-intermedia-rosacodina/src/components/App.js\",\n    _s = $RefreshSig$();\n\nimport '../styles/App.scss';\nimport { useEffect, useState } from 'react'; // Función principal.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // Variables generales, constantes, variables de estado.\n  // Hooks.\n  // Funciones generales, funnciones manejadoras de eventos.\n  useEffect(() => {\n    fetch('https://beta.adalab.es/curso-intensivo-fullstack-recursos/apis/quotes-friends-tv-v1/quotes.json').then(response => response.json()).then(data => console.log(data)); //cuando la API responde, guardamos los datos en el estado para que se vuelva a renderizar poniendo setStarWatsData por ejemplo\n  });\n  return (\n    /*#__PURE__*/\n    // Como solo se puede devolver una etiqueta, se puede usar una etiqueta ficticia vacia, llamada FRAGMENTO, y que se escribe, abiriendo y cerrando la etiqueta vacia, así \"<> html </>\".\n    _jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"header\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Frases de Friends\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 7\n      }, this)\n    }, void 0, false)\n  );\n}\n\n_s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/Rosa/Desktop/projects ADALAB/Módulo-3/EVALUACIONES/modulo-3-evaluacion-intermedia-rosacodina/src/components/App.js"],"names":["useEffect","useState","App","fetch","then","response","json","data","console","log"],"mappings":";;;AAAA,OAAO,oBAAP;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC,C,CAEA;;;;;AACA,SAASC,GAAT,GAAe;AAAA;;AACb;AACA;AACA;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,KAAK,CACH,iGADG,CAAL,CAGGC,IAHH,CAGSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EAHtB,EAIGF,IAJH,CAISG,IAAD,IAAUC,OAAO,CAACC,GAAR,CAAYF,IAAZ,CAJlB,EADc,CAMd;AACD,GAPQ,CAAT;AASA;AAAA;AACE;AACA;AAAA,6BACE;AAAA,+BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAFF;AAQD;;GAtBQL,G;;KAAAA,G;AAwBT,eAAeA,GAAf","sourcesContent":["import '../styles/App.scss';\nimport { useEffect, useState } from 'react';\n\n// Función principal.\nfunction App() {\n  // Variables generales, constantes, variables de estado.\n  // Hooks.\n  // Funciones generales, funnciones manejadoras de eventos.\n\n  useEffect(() => {\n    fetch(\n      'https://beta.adalab.es/curso-intensivo-fullstack-recursos/apis/quotes-friends-tv-v1/quotes.json'\n    )\n      .then((response) => response.json())\n      .then((data) => console.log(data));\n    //cuando la API responde, guardamos los datos en el estado para que se vuelva a renderizar poniendo setStarWatsData por ejemplo\n  });\n\n  return (\n    // Como solo se puede devolver una etiqueta, se puede usar una etiqueta ficticia vacia, llamada FRAGMENTO, y que se escribe, abiriendo y cerrando la etiqueta vacia, así \"<> html </>\".\n    <>\n      <header>\n        <h1>Frases de Friends</h1>\n      </header>\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}